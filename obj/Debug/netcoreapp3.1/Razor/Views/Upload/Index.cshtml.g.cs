#pragma checksum "C:\Solutions\upload\FileUpload\Views\Upload\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b3f09972a394e7b0efdf8511815f0b29a88f9610"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Upload_Index), @"mvc.1.0.view", @"/Views/Upload/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Solutions\upload\FileUpload\Views\_ViewImports.cshtml"
using FileUpload;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Solutions\upload\FileUpload\Views\_ViewImports.cshtml"
using FileUpload.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b3f09972a394e7b0efdf8511815f0b29a88f9610", @"/Views/Upload/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6c4da4f3990f4e4ed916571717d0596d929556ce", @"/Views/_ViewImports.cshtml")]
    public class Views_Upload_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/signalr/dist/browser/signalr.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Solutions\upload\FileUpload\Views\Upload\Index.cshtml"
  
    ViewData["Title"] = "File Upload";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<style>
    .fileUpload {
        position: relative;
        overflow: hidden;
        margin: 0;
    }
    .fileUpload input.upload {
        position: absolute;
        top: 0;
        right: 0;
        margin: 0;
        padding: 0;
        font-size: 20px;
        cursor: pointer;
        opacity: 0;
        filter: alpha(opacity=0);
    }
</style>

<div class=""row"">
    <div class=""col-md-6"">
        <div class=""input-group"">
            <input id=""uploadFile""");
            BeginWriteAttribute("placeholder", " placeholder=\"", 541, "\"", 555, 0);
            EndWriteAttribute();
            WriteLiteral(@" disabled=""disabled"" class=""form-control"" style=""height:36px"" />
            <div class=""input-group-btn"">
                <div class=""fileUpload btn btn-info"">
                    <span>...</span>
                    <input type=""file"" name=""fileToUpload"" id=""fileToUpload"" class=""upload"" onchange=""fileToUploadOnchange()"" multiple accept="".csv"" />
                </div>
            </div>
        </div>
    </div>
    <input type=""button"" class=""btn btn-info btn-sm"" value=""Upload"" id=""btnUpload"" />
</div>
<p></p>
<div class=""text-center"">

    <div class=""row"">
        <div class=""col-md-12"">
            <table class=""table table-bordered table-hover"" style=""width:100%"">
                <thead>
                    <tr>
                        <th>S/N</th>
                        <th>Company</th>
                        <th>Category</th>
                        <th>City</th>
                        <th>Funded Date</th>
                        <th>Currency</th>
                        <");
            WriteLiteral(@"th>Amount</th>
                    </tr>
                </thead>
                <tbody id=""tableBody"">
                </tbody>
            </table>
        </div>
    </div>
</div>

<div id=""progressModal"" class=""modal fade modal-center-c"" tabindex=""-1"" role=""dialog"" data-backdrop=""static"">
    <div class=""modal-dialog modal-lg"" style=""width: 50% !important;   top: 40vh;"">
        <div class=""modal-content"">
            <div class=""modal-body"">
                <div class=""row"">
                    <div class=""col-md-10"">
                        <div class=""progress"">
                            <div class=""progress-bar progress-bar-striped"" role=""progressbar"" id=""progress_bar"" style=""width: 0%"" aria-valuenow=""0"" aria-valuemin=""0"" aria-valuemax=""100""></div>
                        </div>
                    </div>
                    <div class=""col-md-2"">
                          <span>Count: <text id=""uploadCount"">0</text></span>
                    </div>
                </div>
 ");
            WriteLiteral("           </div>\r\n        </div> <!-- / .modal-content -->\r\n    </div> <!-- / .modal-dialog -->\r\n</div> <!-- / .modal -->\r\n\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "b3f09972a394e7b0efdf8511815f0b29a88f96106668", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <script>
        var connection = new signalR.HubConnectionBuilder().withUrl(""/broadcast"").build();
        connection.on(""feedBack"", function (model) {
            $(""#progress_bar"").css(""width"", `${model.currentPercent}%`);
            $(""#uploadCount"").html(model.uploadCount);
        });
        connection.start().then(function ()
        {
            console.log(""Sinalr Connected"");
        }).catch(function (err) {
            console.log(err.toString());
        });

        $(document).ready(function () {
            defaultTableContent();
        })
        $(""#btnUpload"").click(function (e) {
            e.preventDefault();
            uploadFile();

        });
        function defaultTableContent() {
            var empltyTableTemplate = $(""<tr></tr>"");
            var placeholder = ""<td colSpan='7'><p>No Data</p></td>"";
            empltyTableTemplate.html(placeholder);
            $(""#tableBody"").html(empltyTableTemplate);
        }
        function fileToUpload");
                WriteLiteral(@"Onchange() {
            $this = document.getElementById(""fileToUpload"");
            fileSelected($this);
        }
        function fileSelected(input) {
            var file = document.getElementById('fileToUpload').files[0];

            var ext = input.value.split('.');
            ext = ext[ext.length - 1].toLowerCase();
            var arrayExtensions = ['csv'];
            if (arrayExtensions.lastIndexOf(ext.toLowerCase()) == -1) {
                alert(""You can only upload .CSV File"");
                input.value = '';
                document.getElementById(""uploadFile"").value = '';
                return;
            }
            document.getElementById(""uploadFile"").value = file.name;
            if (file) {
                var fileSize = 0;
                if (file.size > 1024 * 1024)
                    fileSize = (Math.round(file.size * 100 / (1024 * 1024)) / 100).toString() + 'MB';
                else
                    fileSize = (Math.round(file.size * 100 / 1024) / ");
                WriteLiteral(@"100).toString() + 'KB';
            }
        }

        function uploadFile() {
            var file = document.getElementById('fileToUpload').files[0];
            if (file) {
                $(""#progressModal"").modal(""show"");
                var url = '");
#nullable restore
#line 141 "C:\Solutions\upload\FileUpload\Views\Upload\Index.cshtml"
                      Write(Url.Action("UploadFile", "Upload"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"';
                var fd = new FormData();
                fd.append(""fileToUpload"", file);
                var xhr = new XMLHttpRequest();
                xhr.addEventListener(""load"", uploadComplete, false);
                xhr.addEventListener(""error"", uploadFailed, false);
                xhr.addEventListener(""abort"", uploadCanceled, false);
                xhr.open(""POST"", url);
                xhr.send(fd);
            } else {
                alert(""You are can not upload an empty file"");
            }
        }

        function uploadComplete(evt) {
            var response = JSON.parse(evt.target.response);
             $(""#progressModal"").modal(""hide"");
             ResetUploadModal();
            if (response.error) {
                alert(response.message);
                return;
            }
            populateTableData(response.data);
           
        }
        function populateTableData(data) {
            if (data.length <= 0) return;
                $(""#table");
                WriteLiteral(@"Body"").html('');
            $.each(data, function (i, val) {
                let tableRow = $(""<tr></tr>"");
                let tablecells = `<td>${i + 1}</td>` +
                    `<td>${val.company}</td>` +
                    `<td>${val.category}</td>` +
                    `<td>${val.city}</td>` +
                    `<td>${val.date}</td>` +
                    `<td>${val.currency}</td>` +
                    `<td>${val.strAmount}</td>`;
                tableRow.html(tablecells);
                $(""#tableBody"").append(tableRow[0]);
            });
        }
        function uploadFailed(evt) {
            $(""#progressModal"").modal(""hide"");
            ResetUploadModal();
            alert(""There was an error attempting to upload the file"");
        }
        function uploadCanceled(evt) {
            $(""#progressModal"").modal(""hide"");
            ResetUploadModal();
            alert(""The upload has been canceled by the user or the browser dropped the connection"")
        }
    ");
                WriteLiteral(@"    function ResetUploadModal() {
            document.getElementById(""uploadFile"").value = '';
            document.getElementById(""fileToUpload"").value = null;
            $(""#progressContainer"").hide();
            $(""#progress_bar"").css(""width"", ""-1%"");
        }
    </script>

");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
